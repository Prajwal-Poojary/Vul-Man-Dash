{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    http;\n    currentUserSubject = new BehaviorSubject(null);\n    currentUser$ = this.currentUserSubject.asObservable();\n    isAuthenticated$ = this.currentUser$.pipe(map(user => !!user));\n    constructor(http) {\n      this.http = http;\n      const storedUser = localStorage.getItem('currentUser');\n      if (storedUser) {\n        this.currentUserSubject.next(JSON.parse(storedUser));\n      }\n      // Listen for token changes in other tabs\n      window.addEventListener('storage', event => {\n        if (event.key === 'currentUser') {\n          const newValue = event.newValue;\n          const oldValue = event.oldValue;\n          // If token is removed or changed, logout and redirect\n          if (!newValue || newValue !== oldValue) {\n            this.logout();\n            window.location.href = '/login';\n          }\n        }\n      });\n    }\n    login(email, password) {\n      return this.http.post(`${environment.apiUrl}/auth/login`, {\n        email,\n        password\n      }).pipe(map(res => {\n        const decoded = jwtDecode(res.token);\n        const user = {\n          ...res.user,\n          token: res.token,\n          exp: decoded.exp\n        };\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n        this.setAutoLogout(user.exp);\n        return user;\n      }));\n    }\n    register(name, email, password) {\n      return this.http.post(`${environment.apiUrl}/auth/register`, {\n        name,\n        email,\n        password\n      }).pipe(map(res => {\n        const decoded = jwtDecode(res.token);\n        const user = {\n          ...res.user,\n          token: res.token,\n          exp: decoded.exp\n        };\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n        this.setAutoLogout(user.exp);\n        return user;\n      }));\n    }\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n      if (this.logoutTimer) {\n        clearTimeout(this.logoutTimer);\n      }\n    }\n    forgotPassword(email) {\n      return this.http.post(`${environment.apiUrl}/auth/forgot-password`, {\n        email\n      });\n    }\n    resetPassword(token, password) {\n      return this.http.post(`${environment.apiUrl}/auth/reset-password`, {\n        token,\n        password\n      });\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    getToken() {\n      const user = this.getCurrentUser();\n      return user?.token || null;\n    }\n    isTokenExpired() {\n      const user = this.getCurrentUser();\n      if (!user || !user.token || !user.exp) return true;\n      const now = Math.floor(Date.now() / 1000);\n      return user.exp < now;\n    }\n    isAuthenticated() {\n      return !!this.getCurrentUser() && !this.isTokenExpired();\n    }\n    logoutTimer;\n    setAutoLogout(exp) {\n      if (this.logoutTimer) {\n        clearTimeout(this.logoutTimer);\n      }\n      const now = Math.floor(Date.now() / 1000);\n      const timeout = (exp - now) * 1000;\n      if (timeout > 0) {\n        this.logoutTimer = setTimeout(() => {\n          this.logout();\n          window.location.href = '/login';\n        }, timeout);\n      } else {\n        this.logout();\n        window.location.href = '/login';\n      }\n    }\n    initializeAutoLogout() {\n      const user = this.getCurrentUser();\n      if (user && user.exp) {\n        this.setAutoLogout(user.exp);\n      }\n    }\n    isLoggedIn() {\n      return this.isAuthenticated();\n    }\n    static ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":{"version":3,"names":["BehaviorSubject","map","environment","jwtDecode","AuthService","http","currentUserSubject","currentUser$","asObservable","isAuthenticated$","pipe","user","constructor","storedUser","localStorage","getItem","next","JSON","parse","window","addEventListener","event","key","newValue","oldValue","logout","location","href","login","email","password","post","apiUrl","res","decoded","token","exp","setItem","stringify","setAutoLogout","register","name","removeItem","logoutTimer","clearTimeout","forgotPassword","resetPassword","getCurrentUser","value","getToken","isTokenExpired","now","Math","floor","Date","isAuthenticated","timeout","setTimeout","initializeAutoLogout","isLoggedIn","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/app/src/app/core/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, map } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { User } from '../models/user.model';\nimport { jwtDecode } from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  currentUser$ = this.currentUserSubject.asObservable();\n  isAuthenticated$ = this.currentUser$.pipe(map(user => !!user));\n\n  constructor(private http: HttpClient) {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n    // Listen for token changes in other tabs\n    window.addEventListener('storage', (event) => {\n      if (event.key === 'currentUser') {\n        const newValue = event.newValue;\n        const oldValue = event.oldValue;\n        // If token is removed or changed, logout and redirect\n        if (!newValue || newValue !== oldValue) {\n          this.logout();\n          window.location.href = '/login';\n        }\n      }\n    });\n  }\n\n  login(email: string, password: string): Observable<User> {\n    return this.http.post<{ user: User, token: string }>(`${environment.apiUrl}/auth/login`, { email, password })\n      .pipe(\n        map(res => {\n          const decoded: any = jwtDecode(res.token);\n          const user: User = {\n            ...res.user,\n            token: res.token,\n            exp: decoded.exp\n          };\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          this.currentUserSubject.next(user);\n          this.setAutoLogout(user.exp!);\n          return user;\n        })\n      );\n  }\n\n  register(name: string, email: string, password: string): Observable<User> {\n    return this.http.post<{ user: User, token: string }>(`${environment.apiUrl}/auth/register`, { name, email, password })\n      .pipe(\n        map(res => {\n          const decoded: any = jwtDecode(res.token);\n          const user: User = {\n            ...res.user,\n            token: res.token,\n            exp: decoded.exp\n          };\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          this.currentUserSubject.next(user);\n          this.setAutoLogout(user.exp!);\n          return user;\n        })\n      );\n  }\n\n  logout(): void {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n    if (this.logoutTimer) {\n      clearTimeout(this.logoutTimer);\n    }\n  }\n\n  forgotPassword(email: string): Observable<{ message: string }> {\n    return this.http.post<{ message: string }>(`${environment.apiUrl}/auth/forgot-password`, { email });\n  }\n\n  resetPassword(token: string, password: string): Observable<{ message: string }> {\n    return this.http.post<{ message: string }>(`${environment.apiUrl}/auth/reset-password`, { token, password });\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  getToken(): string | null {\n    const user = this.getCurrentUser();\n    return user?.token || null;\n  }\n\n  isTokenExpired(): boolean {\n    const user = this.getCurrentUser();\n    if (!user || !user.token || !user.exp) return true;\n    const now = Math.floor(Date.now() / 1000);\n    return user.exp < now;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getCurrentUser() && !this.isTokenExpired();\n  }\n\n  private logoutTimer: any;\n  setAutoLogout(exp: number) {\n    if (this.logoutTimer) {\n      clearTimeout(this.logoutTimer);\n    }\n    const now = Math.floor(Date.now() / 1000);\n    const timeout = (exp - now) * 1000;\n    if (timeout > 0) {\n      this.logoutTimer = setTimeout(() => {\n        this.logout();\n        window.location.href = '/login';\n      }, timeout);\n    } else {\n      this.logout();\n      window.location.href = '/login';\n    }\n  }\n\n  initializeAutoLogout() {\n    const user = this.getCurrentUser();\n    if (user && user.exp) {\n      this.setAutoLogout(user.exp);\n    }\n  }\n\n  isLoggedIn(): boolean {\n    return this.isAuthenticated();\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}