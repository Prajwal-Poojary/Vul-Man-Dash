{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ReportService = /*#__PURE__*/(() => {\n  class ReportService {\n    http;\n    apiUrl = `${environment.apiUrl2}/reports`;\n    constructor(http) {\n      this.http = http;\n    }\n    // Get all reports (paginated, with optional search)\n    getReports(page = 1, limit = 10, search = '') {\n      let url = `${this.apiUrl}?page=${page}&limit=${limit}`;\n      if (search) {\n        url += `&search=${encodeURIComponent(search)}`;\n      }\n      return this.http.get(url);\n    }\n    // Get report by title\n    getReportByTitle(title) {\n      return this.http.get(`${this.apiUrl}/title/${title}`);\n    }\n    // Add new report\n    addReport(report) {\n      return this.http.post(this.apiUrl, report);\n    }\n    // Delete report by _id\n    deleteReport(id) {\n      return this.http.delete(`${this.apiUrl}/${id}`);\n    }\n    // Get dashboard data by report ID\n    getDashboardData(reportId) {\n      return this.http.get(`${this.apiUrl}/dashboard/${reportId}`);\n    }\n    // Save dashboard data for a report\n    saveDashboardData(reportId, dashboardData) {\n      return this.http.post(`${this.apiUrl}/dashboard/${reportId}`, dashboardData);\n    }\n    // Update dashboard data for a report\n    updateDashboardData(reportId, dashboardData) {\n      return this.http.put(`${this.apiUrl}/dashboard/${reportId}`, dashboardData);\n    }\n    // Get report data by ID\n    getReportData(reportId) {\n      return this.http.get(`${this.apiUrl}/report/${reportId}`);\n    }\n    // Save report data\n    saveReportData(reportId, reportData) {\n      return this.http.post(`${this.apiUrl}/report/${reportId}`, reportData);\n    }\n    // Update report data\n    updateReportData(reportId, reportData) {\n      return this.http.put(`${this.apiUrl}/report/${reportId}`, reportData);\n    }\n    // Verify report password\n    verifyReportPassword(data) {\n      return this.http.post(`${this.apiUrl}/verify-password`, data);\n    }\n    static ɵfac = function ReportService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ReportService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ReportService,\n      factory: ReportService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ReportService;\n})();","map":{"version":3,"names":["environment","ReportService","http","apiUrl","apiUrl2","constructor","getReports","page","limit","search","url","encodeURIComponent","get","getReportByTitle","title","addReport","report","post","deleteReport","id","delete","getDashboardData","reportId","saveDashboardData","dashboardData","updateDashboardData","put","getReportData","saveReportData","reportData","updateReportData","verifyReportPassword","data","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/app/src/app/services/report.service.ts"],"sourcesContent":["// src/app/services/report.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\nexport interface DashboardData {\n  _id?: string;\n  cvssScore: {\n    baseScore: number;\n    riskLevel: string;\n  };\n  severityDistribution: {\n    critical: number;\n    high: number;\n    medium: number;\n    low: number;\n    informative: number;\n  };\n  trendData: {\n    months: string;\n    counts: string;\n  };\n  cvssMetrics: {\n    attackVector: string;\n    attackComplexity: string;\n    privilegesRequired: string;\n    userInteraction: string;\n    scope: string;\n    confidentiality: string;\n    integrity: string;\n    availability: string;\n    trendMonths: string;\n  };\n  vulnerabilityFindings: {\n    areas: string;\n    areaVulnerabilities: Array<{\n      name: string;\n      count: number;\n    }>;\n    totalVulnerabilities: number;\n  };\n  timestamp: Date;\n}\n\nexport interface Report {\n  _id?: string;\n  title: string;\n  content?: string;\n  password?: string;\n  createdTime?: Date;\n  dashboardData?: DashboardData;\n  reportData?: {\n    logoName: string;\n    logoDataURL: string;\n    client: string;\n    reportDate: Date;\n    auditType: string;\n    reportType: string;\n    scopes: string[];\n    periodStart: Date;\n    periodEnd: Date;\n    summary: string;\n    manifest: {\n      appName: string;\n      testerName: string;\n      docVersion: string;\n      initDate: Date;\n      reDate: Date;\n      toolsUsed: string;\n      scopes: string[];\n      description: string;\n      manifestType: string;\n    };\n    findings: Array<{\n      slno: number;\n      vuln: string;\n      vulnUrl: string;\n      threat: string;\n      threatDetails: string;\n      impact: string;\n      stepsToReproduce: string;\n      pocDataURL: (string | { url: string; caption: string })[];\n      retestingPocDataURL: (string | { url: string; caption: string })[];\n      pocType: string;\n      mitigation: string;\n      references: string;\n      severity: string;\n      status: string;\n    }>;\n    chartImageURLs: string[];\n    timestamp: Date;\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReportService {\n  private apiUrl = `${environment.apiUrl2}/reports`;\n\n  constructor(private http: HttpClient) {}\n\n  // Get all reports (paginated, with optional search)\n  getReports(page: number = 1, limit: number = 10, search: string = ''): Observable<any> {\n    let url = `${this.apiUrl}?page=${page}&limit=${limit}`;\n    if (search) {\n      url += `&search=${encodeURIComponent(search)}`;\n    }\n    return this.http.get<any>(url);\n  }\n\n  // Get report by title\n  getReportByTitle(title: string): Observable<Report> {\n    return this.http.get<Report>(`${this.apiUrl}/title/${title}`);\n  }\n\n  // Add new report\n  addReport(report: Report): Observable<Report> {\n    return this.http.post<Report>(this.apiUrl, report);\n  }\n\n  // Delete report by _id\n  deleteReport(id: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n\n  // Get dashboard data by report ID\n  getDashboardData(reportId: string): Observable<DashboardData> {\n    return this.http.get<DashboardData>(`${this.apiUrl}/dashboard/${reportId}`);\n  }\n\n  // Save dashboard data for a report\n  saveDashboardData(reportId: string, dashboardData: DashboardData): Observable<any> {\n    return this.http.post(`${this.apiUrl}/dashboard/${reportId}`, dashboardData);\n  }\n\n  // Update dashboard data for a report\n  updateDashboardData(reportId: string, dashboardData: DashboardData): Observable<any> {\n    return this.http.put(`${this.apiUrl}/dashboard/${reportId}`, dashboardData);\n  }\n\n  // Get report data by ID\n  getReportData(reportId: string): Observable<Report['reportData']> {\n    return this.http.get<Report['reportData']>(`${this.apiUrl}/report/${reportId}`);\n  }\n\n  // Save report data\n  saveReportData(reportId: string, reportData: Report['reportData']): Observable<any> {\n    return this.http.post(`${this.apiUrl}/report/${reportId}`, reportData);\n  }\n\n  // Update report data\n  updateReportData(reportId: string, reportData: Report['reportData']): Observable<any> {\n    return this.http.put(`${this.apiUrl}/report/${reportId}`, reportData);\n  }\n\n  // Verify report password\n  verifyReportPassword(data: { title?: string; id?: string; password: string }): Observable<{ success: boolean }> {\n    return this.http.post<{ success: boolean }>(`${this.apiUrl}/verify-password`, data);\n  }\n}\n"],"mappings":"AAKA,SAASA,WAAW,QAAQ,gCAAgC;;;AA8F5D,WAAaC,aAAa;EAApB,MAAOA,aAAa;IAGJC,IAAA;IAFZC,MAAM,GAAG,GAAGH,WAAW,CAACI,OAAO,UAAU;IAEjDC,YAAoBH,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAe;IAEvC;IACAI,UAAUA,CAACC,IAAA,GAAe,CAAC,EAAEC,KAAA,GAAgB,EAAE,EAAEC,MAAA,GAAiB,EAAE;MAClE,IAAIC,GAAG,GAAG,GAAG,IAAI,CAACP,MAAM,SAASI,IAAI,UAAUC,KAAK,EAAE;MACtD,IAAIC,MAAM,EAAE;QACVC,GAAG,IAAI,WAAWC,kBAAkB,CAACF,MAAM,CAAC,EAAE;MAChD;MACA,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAMF,GAAG,CAAC;IAChC;IAEA;IACAG,gBAAgBA,CAACC,KAAa;MAC5B,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAS,GAAG,IAAI,CAACT,MAAM,UAAUW,KAAK,EAAE,CAAC;IAC/D;IAEA;IACAC,SAASA,CAACC,MAAc;MACtB,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAS,IAAI,CAACd,MAAM,EAAEa,MAAM,CAAC;IACpD;IAEA;IACAE,YAAYA,CAACC,EAAU;MACrB,OAAO,IAAI,CAACjB,IAAI,CAACkB,MAAM,CAAC,GAAG,IAAI,CAACjB,MAAM,IAAIgB,EAAE,EAAE,CAAC;IACjD;IAEA;IACAE,gBAAgBA,CAACC,QAAgB;MAC/B,OAAO,IAAI,CAACpB,IAAI,CAACU,GAAG,CAAgB,GAAG,IAAI,CAACT,MAAM,cAAcmB,QAAQ,EAAE,CAAC;IAC7E;IAEA;IACAC,iBAAiBA,CAACD,QAAgB,EAAEE,aAA4B;MAC9D,OAAO,IAAI,CAACtB,IAAI,CAACe,IAAI,CAAC,GAAG,IAAI,CAACd,MAAM,cAAcmB,QAAQ,EAAE,EAAEE,aAAa,CAAC;IAC9E;IAEA;IACAC,mBAAmBA,CAACH,QAAgB,EAAEE,aAA4B;MAChE,OAAO,IAAI,CAACtB,IAAI,CAACwB,GAAG,CAAC,GAAG,IAAI,CAACvB,MAAM,cAAcmB,QAAQ,EAAE,EAAEE,aAAa,CAAC;IAC7E;IAEA;IACAG,aAAaA,CAACL,QAAgB;MAC5B,OAAO,IAAI,CAACpB,IAAI,CAACU,GAAG,CAAuB,GAAG,IAAI,CAACT,MAAM,WAAWmB,QAAQ,EAAE,CAAC;IACjF;IAEA;IACAM,cAAcA,CAACN,QAAgB,EAAEO,UAAgC;MAC/D,OAAO,IAAI,CAAC3B,IAAI,CAACe,IAAI,CAAC,GAAG,IAAI,CAACd,MAAM,WAAWmB,QAAQ,EAAE,EAAEO,UAAU,CAAC;IACxE;IAEA;IACAC,gBAAgBA,CAACR,QAAgB,EAAEO,UAAgC;MACjE,OAAO,IAAI,CAAC3B,IAAI,CAACwB,GAAG,CAAC,GAAG,IAAI,CAACvB,MAAM,WAAWmB,QAAQ,EAAE,EAAEO,UAAU,CAAC;IACvE;IAEA;IACAE,oBAAoBA,CAACC,IAAuD;MAC1E,OAAO,IAAI,CAAC9B,IAAI,CAACe,IAAI,CAAuB,GAAG,IAAI,CAACd,MAAM,kBAAkB,EAAE6B,IAAI,CAAC;IACrF;;uCA9DW/B,aAAa,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAbnC,aAAa;MAAAoC,OAAA,EAAbpC,aAAa,CAAAqC,IAAA;MAAAC,UAAA,EAFZ;IAAM;;SAEPtC,aAAa;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}