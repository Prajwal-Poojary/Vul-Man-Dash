{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { Subject, BehaviorSubject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nexport let WebSocketService = /*#__PURE__*/(() => {\n  class WebSocketService {\n    socket = null;\n    notificationSubject = new Subject();\n    connectionStatusSubject = new BehaviorSubject(false);\n    constructor() {}\n    connect(token) {\n      if (this.socket?.connected) {\n        return;\n      }\n      this.socket = io(environment.apiUrl2.replace('/api', ''), {\n        auth: {\n          token\n        },\n        autoConnect: true,\n        reconnection: true,\n        reconnectionDelay: 1000,\n        reconnectionAttempts: 5,\n        timeout: 20000\n      });\n      this.setupEventListeners();\n    }\n    disconnect() {\n      if (this.socket) {\n        this.socket.disconnect();\n        this.socket = null;\n        this.connectionStatusSubject.next(false);\n      }\n    }\n    setupEventListeners() {\n      if (!this.socket) return;\n      this.socket.on('connect', () => {\n        console.log('Connected to WebSocket server');\n        this.connectionStatusSubject.next(true);\n      });\n      this.socket.on('disconnect', () => {\n        console.log('Disconnected from WebSocket server');\n        this.connectionStatusSubject.next(false);\n      });\n      this.socket.on('notification', notification => {\n        this.notificationSubject.next(notification);\n      });\n      this.socket.on('connect_error', error => {\n        console.error('WebSocket connection error:', error);\n        this.connectionStatusSubject.next(false);\n      });\n    }\n    joinRoom(roomId) {\n      if (this.socket?.connected) {\n        this.socket.emit('join-room', roomId);\n      }\n    }\n    leaveRoom(roomId) {\n      if (this.socket?.connected) {\n        this.socket.emit('leave-room', roomId);\n      }\n    }\n    getNotifications() {\n      return this.notificationSubject.asObservable();\n    }\n    getConnectionStatus() {\n      return this.connectionStatusSubject.asObservable();\n    }\n    isConnected() {\n      return this.socket?.connected || false;\n    }\n    static ɵfac = function WebSocketService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || WebSocketService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WebSocketService,\n      factory: WebSocketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return WebSocketService;\n})();","map":{"version":3,"names":["io","Subject","BehaviorSubject","environment","WebSocketService","socket","notificationSubject","connectionStatusSubject","constructor","connect","token","connected","apiUrl2","replace","auth","autoConnect","reconnection","reconnectionDelay","reconnectionAttempts","timeout","setupEventListeners","disconnect","next","on","console","log","notification","error","joinRoom","roomId","emit","leaveRoom","getNotifications","asObservable","getConnectionStatus","isConnected","factory","ɵfac","providedIn"],"sources":["/app/src/app/services/websocket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { io, Socket } from 'socket.io-client';\nimport { Observable, Subject, BehaviorSubject } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\nexport interface Notification {\n  type: string;\n  title?: string;\n  message: string;\n  severity?: 'low' | 'medium' | 'high' | 'critical';\n  timestamp: string;\n  data?: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebSocketService {\n  private socket: Socket | null = null;\n  private notificationSubject = new Subject<Notification>();\n  private connectionStatusSubject = new BehaviorSubject<boolean>(false);\n\n  constructor() {}\n\n  connect(token: string): void {\n    if (this.socket?.connected) {\n      return;\n    }\n\n    this.socket = io(environment.apiUrl2.replace('/api', ''), {\n      auth: { token },\n      autoConnect: true,\n      reconnection: true,\n      reconnectionDelay: 1000,\n      reconnectionAttempts: 5,\n      timeout: 20000\n    });\n\n    this.setupEventListeners();\n  }\n\n  disconnect(): void {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.connectionStatusSubject.next(false);\n    }\n  }\n\n  private setupEventListeners(): void {\n    if (!this.socket) return;\n\n    this.socket.on('connect', () => {\n      console.log('Connected to WebSocket server');\n      this.connectionStatusSubject.next(true);\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from WebSocket server');\n      this.connectionStatusSubject.next(false);\n    });\n\n    this.socket.on('notification', (notification: Notification) => {\n      this.notificationSubject.next(notification);\n    });\n\n    this.socket.on('connect_error', (error) => {\n      console.error('WebSocket connection error:', error);\n      this.connectionStatusSubject.next(false);\n    });\n  }\n\n  joinRoom(roomId: string): void {\n    if (this.socket?.connected) {\n      this.socket.emit('join-room', roomId);\n    }\n  }\n\n  leaveRoom(roomId: string): void {\n    if (this.socket?.connected) {\n      this.socket.emit('leave-room', roomId);\n    }\n  }\n\n  getNotifications(): Observable<Notification> {\n    return this.notificationSubject.asObservable();\n  }\n\n  getConnectionStatus(): Observable<boolean> {\n    return this.connectionStatusSubject.asObservable();\n  }\n\n  isConnected(): boolean {\n    return this.socket?.connected || false;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}