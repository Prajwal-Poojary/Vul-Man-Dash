{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let AlertService = /*#__PURE__*/(() => {\n  class AlertService {\n    alertSubject = new BehaviorSubject(null);\n    alert$ = this.alertSubject.asObservable();\n    showSuccess(message) {\n      this.show('success', message);\n    }\n    showError(message) {\n      this.show('error', message);\n    }\n    showInfo(message) {\n      this.show('info', message);\n    }\n    showWarning(message) {\n      this.show('warning', message);\n    }\n    show(type, message) {\n      this.alertSubject.next({\n        type,\n        message\n      });\n      setTimeout(() => {\n        this.alertSubject.next(null);\n      }, 5000);\n    }\n    static ɵfac = function AlertService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AlertService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AlertService,\n      factory: AlertService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AlertService;\n})();","map":{"version":3,"names":["BehaviorSubject","AlertService","alertSubject","alert$","asObservable","showSuccess","message","show","showError","showInfo","showWarning","type","next","setTimeout","factory","ɵfac","providedIn"],"sources":["/app/src/app/core/services/alert.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport interface Alert {\n  type: 'success' | 'error' | 'info' | 'warning';\n  message: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertService {\n  private alertSubject = new BehaviorSubject<Alert | null>(null);\n  alert$: Observable<Alert | null> = this.alertSubject.asObservable();\n\n  showSuccess(message: string): void {\n    this.show('success', message);\n  }\n\n  showError(message: string): void {\n    this.show('error', message);\n  }\n\n  showInfo(message: string): void {\n    this.show('info', message);\n  }\n\n  showWarning(message: string): void {\n    this.show('warning', message);\n  }\n\n  private show(type: Alert['type'], message: string): void {\n    this.alertSubject.next({ type, message });\n    setTimeout(() => {\n      this.alertSubject.next(null);\n    }, 5000);\n  }\n} "],"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AAUlD,WAAaC,YAAY;EAAnB,MAAOA,YAAY;IACfC,YAAY,GAAG,IAAIF,eAAe,CAAe,IAAI,CAAC;IAC9DG,MAAM,GAA6B,IAAI,CAACD,YAAY,CAACE,YAAY,EAAE;IAEnEC,WAAWA,CAACC,OAAe;MACzB,IAAI,CAACC,IAAI,CAAC,SAAS,EAAED,OAAO,CAAC;IAC/B;IAEAE,SAASA,CAACF,OAAe;MACvB,IAAI,CAACC,IAAI,CAAC,OAAO,EAAED,OAAO,CAAC;IAC7B;IAEAG,QAAQA,CAACH,OAAe;MACtB,IAAI,CAACC,IAAI,CAAC,MAAM,EAAED,OAAO,CAAC;IAC5B;IAEAI,WAAWA,CAACJ,OAAe;MACzB,IAAI,CAACC,IAAI,CAAC,SAAS,EAAED,OAAO,CAAC;IAC/B;IAEQC,IAAIA,CAACI,IAAmB,EAAEL,OAAe;MAC/C,IAAI,CAACJ,YAAY,CAACU,IAAI,CAAC;QAAED,IAAI;QAAEL;MAAO,CAAE,CAAC;MACzCO,UAAU,CAAC,MAAK;QACd,IAAI,CAACX,YAAY,CAACU,IAAI,CAAC,IAAI,CAAC;MAC9B,CAAC,EAAE,IAAI,CAAC;IACV;;uCAzBWX,YAAY;IAAA;;aAAZA,YAAY;MAAAa,OAAA,EAAZb,YAAY,CAAAc,IAAA;MAAAC,UAAA,EAFX;IAAM;;SAEPf,YAAY;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}